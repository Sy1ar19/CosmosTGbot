import sqlite3
import os

DB_PATH = "users.db"

def delete_db():
    """–£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if os.path.exists(DB_PATH):
        os.remove(DB_PATH)
        print(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.")

def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            cosmos_address TEXT,
            injective_address TEXT,
            celestia_address TEXT,
            dydx_address TEXT
        )''')
        conn.commit()

def save_address(user_id: int, address: str, network: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        column = f"{network}_address"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
        cursor.execute(f"INSERT INTO users (user_id, {column}) VALUES (?, ?) "
                       f"ON CONFLICT(user_id) DO UPDATE SET {column}=?",
                       (user_id, address, address))
        conn.commit()

def get_address(user_id: int, network: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ None, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        column = f"{network}_address"
        cursor.execute(f"SELECT {column} FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()

        if row and row[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ row –Ω–µ None –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å
            return row[0].strip()
        else:
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
