from aiogram import Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.enums import ParseMode
from database import save_address, get_address
from staking_api import get_staked_balance, escape_markdown
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from states import AddressState

async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        escape_markdown(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_address, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å.\n"
                        "–ê –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_stake, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –∑–∞—Å—Ç–µ–π–∫–∞–Ω–æ.")
    )

async def ask_for_address(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Cosmos"), KeyboardButton(text="Injective")],
            [KeyboardButton(text="Celestia"), KeyboardButton(text="DYDX")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–π –∞–¥—Ä–µ—Å —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏? –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)
    await state.set_state(AddressState.receive_address_type)

async def receive_address_type(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞"""
    address_type = message.text.lower()

    if address_type not in ["cosmos", "injective", "celestia", "dydx"]:
        await message.answer(escape_markdown("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 'Cosmos', 'Injective', 'Celestia' –∏–ª–∏ 'DYDX'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        return

    await state.update_data(address_type=address_type)
    await message.answer(escape_markdown(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à {address_type.capitalize()}-–∞–¥—Ä–µ—Å: üîó"), reply_markup=None)
    await state.set_state(AddressState.waiting_for_address)

async def receive_address(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    user_data = await state.get_data()
    address_type = user_data.get("address_type", "cosmos")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - cosmos
    address = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–¥—Ä–µ—Å–∞
    if address_type == "cosmos" and not address.startswith("cosmos1"):
        await message.answer(escape_markdown("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! Cosmos-–∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'cosmos1'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        return
    if address_type == "injective" and not address.startswith("inj1"):
        await message.answer(escape_markdown("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! Injective-–∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'inj1'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        return
    if address_type == "celestia" and not address.startswith("celestia1"):
        await message.answer(escape_markdown("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! Celestia-–∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'celestia1'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        return
    if address_type == "dydx" and not address.startswith("dydx1"):
        await message.answer(escape_markdown("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! DYDX-–∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'dydx1'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        return

    save_address(message.from_user.id, address, address_type)  # üîπ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º `address_type`
    print(f"‚úÖ {address_type.capitalize()}-–∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {message.from_user.id}: {address}")

    await message.answer(escape_markdown(f"‚úÖ –í–∞—à {address_type.capitalize()}-–∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!"), parse_mode=ParseMode.MARKDOWN_V2)
    await state.clear()

async def my_stake(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Cosmos + Injective + Celestia + DYDX)"""
    networks = {
        "cosmos": "üåå Cosmos (ATOM)",
        "injective": "üöÄ Injective (INJ)",
        "celestia": "üåû Celestia (TIA)",
        "dydx": "üìà DYDX"
    }

    response = "üìä *–í–∞—à–∏ –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:*\n\n"
    has_stake = False  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã

    for network, label in networks.items():
        address = get_address(message.from_user.id, network)
        if address:
            staking_info = await get_staked_balance(address, network)
            response += escape_markdown(f"{label}\n{staking_info}\n\n")
            has_stake = True
        else:
            response += escape_markdown(f"‚ùå –í—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ {label}-–∞–¥—Ä–µ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_address, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –µ–≥–æ.\n\n")

    if not has_stake:
        response = escape_markdown("‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_address, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å.")

    await message.answer(response.strip(), parse_mode=ParseMode.MARKDOWN_V2)

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(command_start_handler, CommandStart())
    dp.message.register(ask_for_address, Command("add_address"))
    dp.message.register(receive_address_type, AddressState.receive_address_type)
    dp.message.register(receive_address, AddressState.waiting_for_address)
    dp.message.register(my_stake, Command("my_stake"))
