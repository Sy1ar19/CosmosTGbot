import aiohttp
from coin_price import get_coin_price  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ CoinGecko

# –ü—É–±–ª–∏—á–Ω—ã–µ API –¥–ª—è Cosmos, Injective, Celestia –∏ DYDX
API_URLS = {
    "cosmos": "https://rest.cosmos.directory/cosmoshub",
    "injective": "https://lcd.injective.network",
    "celestia": "https://rest.cosmos.directory/celestia",
    "dydx": "https://rest.cosmos.directory/dydx"
}

# –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
DECIMALS = {
    "cosmos": 1e6,  # ATOM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    "injective": 1e18,  # INJ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 18 –∑–Ω–∞–∫–æ–≤
    "celestia": 1e6,  # TIA –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 6 –∑–Ω–∞–∫–æ–≤
    "dydx": 1e18  # DYDX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 18 –∑–Ω–∞–∫–æ–≤
}

# ID —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ CoinGecko API
TOKEN_IDS = {
    "cosmos": "cosmos",
    "injective": "injective-protocol",
    "celestia": "celestia",
    "dydx": "dydx"
}

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram MarkdownV2.
    """
    escape_chars = r"_*[]()~`>#+-=|{}.!<>"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)


async def get_validator_moniker(validator_address: str, network: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç moniker (–∏–º—è) –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –ø–æ –µ–≥–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∏.
    """
    if network not in API_URLS:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å"

    url = f"{API_URLS[network]}/cosmos/staking/v1beta1/validators/{validator_address}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä"

            data = await response.json()
            moniker = data.get("validator", {}).get("description", {}).get("moniker")
            return escape_markdown(moniker) if moniker else "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä"


async def get_staked_balance(address: str, network: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD –¥–ª—è Cosmos, Injective, Celestia –∏ DYDX.
    """
    if network not in API_URLS:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å"

    url = f"{API_URLS[network]}/cosmos/staking/v1beta1/delegations/{address}"

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ coin_price.py (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ `get_coin_price` —è–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π)
    token_price = get_coin_price(TOKEN_IDS[network], "usd")

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {escape_markdown(network.capitalize())}."

            data = await response.json()
            if "delegation_responses" not in data or not data["delegation_responses"]:
                return f"üîπ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ {escape_markdown(network.capitalize())}."

            result = f"üí∞ *–í–∞—à–∏ –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ {escape_markdown(network.capitalize())}:*\n"
            total_value = 0  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD

            for delegation in data["delegation_responses"]:
                amount = int(delegation["balance"]["amount"]) / DECIMALS[network]
                validator_address = delegation["delegation"]["validator_address"]

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
                validator_name = await get_validator_moniker(validator_address, network)

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                validator_name = escape_markdown(validator_name)
                validator_address = escape_markdown(validator_address)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
                value_in_usd = amount * token_price if token_price else 0
                total_value += value_in_usd

                result += (
                    f"üîπ *{amount:.6f} {network.upper()}* —É *{validator_name}* "
                    f"(`{validator_address}`) ~ \\${value_in_usd:,.2f}\n"
                )

            result += f"\nüíµ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* \\${total_value:,.2f}\n"
            return result
